// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package cloudwatch is a generated GoMock package.
package cloudwatch

import (
	context "context"
	reflect "reflect"

	cloudwatch "github.com/aws/aws-sdk-go-v2/service/cloudwatch"
	docdb "github.com/aws/aws-sdk-go-v2/service/docdb"
	rds "github.com/aws/aws-sdk-go-v2/service/rds"
	gomock "github.com/golang/mock/gomock"
)

// MockDocDBAPI is a mock of DocDBAPI interface.
type MockDocDBAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDocDBAPIMockRecorder
}

// MockDocDBAPIMockRecorder is the mock recorder for MockDocDBAPI.
type MockDocDBAPIMockRecorder struct {
	mock *MockDocDBAPI
}

// NewMockDocDBAPI creates a new mock instance.
func NewMockDocDBAPI(ctrl *gomock.Controller) *MockDocDBAPI {
	mock := &MockDocDBAPI{ctrl: ctrl}
	mock.recorder = &MockDocDBAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocDBAPI) EXPECT() *MockDocDBAPIMockRecorder {
	return m.recorder
}

// CreateDBInstance mocks base method.
func (m *MockDocDBAPI) CreateDBInstance(ctx context.Context, params *docdb.CreateDBInstanceInput, optFns ...func(*docdb.Options)) (*docdb.CreateDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDBInstance", varargs...)
	ret0, _ := ret[0].(*docdb.CreateDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBInstance indicates an expected call of CreateDBInstance.
func (mr *MockDocDBAPIMockRecorder) CreateDBInstance(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBInstance", reflect.TypeOf((*MockDocDBAPI)(nil).CreateDBInstance), varargs...)
}

// DeleteDBInstance mocks base method.
func (m *MockDocDBAPI) DeleteDBInstance(ctx context.Context, params *docdb.DeleteDBInstanceInput, optFns ...func(*docdb.Options)) (*docdb.DeleteDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDBInstance", varargs...)
	ret0, _ := ret[0].(*docdb.DeleteDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBInstance indicates an expected call of DeleteDBInstance.
func (mr *MockDocDBAPIMockRecorder) DeleteDBInstance(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBInstance", reflect.TypeOf((*MockDocDBAPI)(nil).DeleteDBInstance), varargs...)
}

// DescribeDBInstances mocks base method.
func (m *MockDocDBAPI) DescribeDBInstances(ctx context.Context, params *docdb.DescribeDBInstancesInput, optFns ...func(*docdb.Options)) (*docdb.DescribeDBInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBInstances", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeDBInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBInstances indicates an expected call of DescribeDBInstances.
func (mr *MockDocDBAPIMockRecorder) DescribeDBInstances(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstances", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBInstances), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockDocDBAPI) ListTagsForResource(ctx context.Context, params *docdb.ListTagsForResourceInput, optFns ...func(*docdb.Options)) (*docdb.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*docdb.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockDocDBAPIMockRecorder) ListTagsForResource(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockDocDBAPI)(nil).ListTagsForResource), varargs...)
}

// MockCloudWatchAPI is a mock of CloudWatchAPI interface.
type MockCloudWatchAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudWatchAPIMockRecorder
}

// MockCloudWatchAPIMockRecorder is the mock recorder for MockCloudWatchAPI.
type MockCloudWatchAPIMockRecorder struct {
	mock *MockCloudWatchAPI
}

// NewMockCloudWatchAPI creates a new mock instance.
func NewMockCloudWatchAPI(ctrl *gomock.Controller) *MockCloudWatchAPI {
	mock := &MockCloudWatchAPI{ctrl: ctrl}
	mock.recorder = &MockCloudWatchAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudWatchAPI) EXPECT() *MockCloudWatchAPIMockRecorder {
	return m.recorder
}

// GetMetricStatistics mocks base method.
func (m *MockCloudWatchAPI) GetMetricStatistics(ctx context.Context, params *cloudwatch.GetMetricStatisticsInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.GetMetricStatisticsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricStatistics", varargs...)
	ret0, _ := ret[0].(*cloudwatch.GetMetricStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricStatistics indicates an expected call of GetMetricStatistics.
func (mr *MockCloudWatchAPIMockRecorder) GetMetricStatistics(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricStatistics", reflect.TypeOf((*MockCloudWatchAPI)(nil).GetMetricStatistics), varargs...)
}

// MockRDSAPI is a mock of RDSAPI interface.
type MockRDSAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRDSAPIMockRecorder
}

// MockRDSAPIMockRecorder is the mock recorder for MockRDSAPI.
type MockRDSAPIMockRecorder struct {
	mock *MockRDSAPI
}

// NewMockRDSAPI creates a new mock instance.
func NewMockRDSAPI(ctrl *gomock.Controller) *MockRDSAPI {
	mock := &MockRDSAPI{ctrl: ctrl}
	mock.recorder = &MockRDSAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRDSAPI) EXPECT() *MockRDSAPIMockRecorder {
	return m.recorder
}

// DescribeDBClusters mocks base method.
func (m *MockRDSAPI) DescribeDBClusters(ctx context.Context, params *rds.DescribeDBClustersInput, optFns ...func(*rds.Options)) (*rds.DescribeDBClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusters", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusters indicates an expected call of DescribeDBClusters.
func (mr *MockRDSAPIMockRecorder) DescribeDBClusters(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusters", reflect.TypeOf((*MockRDSAPI)(nil).DescribeDBClusters), varargs...)
}
