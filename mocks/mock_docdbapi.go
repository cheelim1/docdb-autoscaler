// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cheelim1/docdb-autoscaler/pkg/autoscaling (interfaces: DocDBAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	docdb "github.com/aws/aws-sdk-go-v2/service/docdb"
	gomock "github.com/golang/mock/gomock"
)

// MockDocDBAPI is a mock of DocDBAPI interface.
type MockDocDBAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDocDBAPIMockRecorder
}

// MockDocDBAPIMockRecorder is the mock recorder for MockDocDBAPI.
type MockDocDBAPIMockRecorder struct {
	mock *MockDocDBAPI
}

// NewMockDocDBAPI creates a new mock instance.
func NewMockDocDBAPI(ctrl *gomock.Controller) *MockDocDBAPI {
	mock := &MockDocDBAPI{ctrl: ctrl}
	mock.recorder = &MockDocDBAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocDBAPI) EXPECT() *MockDocDBAPIMockRecorder {
	return m.recorder
}

// CreateDBInstance mocks base method.
func (m *MockDocDBAPI) CreateDBInstance(arg0 context.Context, arg1 *docdb.CreateDBInstanceInput, arg2 ...func(*docdb.Options)) (*docdb.CreateDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDBInstance", varargs...)
	ret0, _ := ret[0].(*docdb.CreateDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBInstance indicates an expected call of CreateDBInstance.
func (mr *MockDocDBAPIMockRecorder) CreateDBInstance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBInstance", reflect.TypeOf((*MockDocDBAPI)(nil).CreateDBInstance), varargs...)
}

// DeleteDBInstance mocks base method.
func (m *MockDocDBAPI) DeleteDBInstance(arg0 context.Context, arg1 *docdb.DeleteDBInstanceInput, arg2 ...func(*docdb.Options)) (*docdb.DeleteDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDBInstance", varargs...)
	ret0, _ := ret[0].(*docdb.DeleteDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBInstance indicates an expected call of DeleteDBInstance.
func (mr *MockDocDBAPIMockRecorder) DeleteDBInstance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBInstance", reflect.TypeOf((*MockDocDBAPI)(nil).DeleteDBInstance), varargs...)
}

// DescribeDBInstances mocks base method.
func (m *MockDocDBAPI) DescribeDBInstances(arg0 context.Context, arg1 *docdb.DescribeDBInstancesInput, arg2 ...func(*docdb.Options)) (*docdb.DescribeDBInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBInstances", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeDBInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBInstances indicates an expected call of DescribeDBInstances.
func (mr *MockDocDBAPIMockRecorder) DescribeDBInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstances", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBInstances), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockDocDBAPI) ListTagsForResource(arg0 context.Context, arg1 *docdb.ListTagsForResourceInput, arg2 ...func(*docdb.Options)) (*docdb.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*docdb.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockDocDBAPIMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockDocDBAPI)(nil).ListTagsForResource), varargs...)
}
